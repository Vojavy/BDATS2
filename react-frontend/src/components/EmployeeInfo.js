// EmployeeInfo.js
import React, { useState, useEffect } from "react";
import {
  Box,
  Typography,
  CircularProgress,
  Snackbar,
  Alert,
  Avatar,
  List,
  ListItem,
  ListItemAvatar,
  ListItemText,
  IconButton,
  Collapse,
} from "@mui/material";
import {
  ExpandLess,
  ExpandMore,
  Person as PersonIcon,
} from "@mui/icons-material";
import { FaUserTie, FaUsers, FaEnvelope, FaPhone } from "react-icons/fa"; // –ò–∫–æ–Ω–∫–∏ –¥–ª—è –ø–æ–∑–∏—Ü–∏–π
import api from "../services/api"; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É –≤–∞—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω axios –∏–ª–∏ –¥—Ä—É–≥–æ–π –∫–ª–∏–µ–Ω—Ç API

// –ö–∞—Ä—Ç–∞ –∏–∫–æ–Ω–æ–∫ –¥–ª—è –ø–æ–∑–∏—Ü–∏–π
const positionIcons = {
  1: <FaUserTie color="primary" />, // –ú–µ–Ω–µ–¥–∂–µ—Ä
  2: <FaUsers color="secondary" />, // –ö–æ–º–∞–Ω–¥–∏—Ä
  3: <FaEnvelope color="success" />, // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
  4: <FaPhone color="warning" />, // –°–æ—Ç—Ä—É–¥–Ω–∏–∫
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ –∏–µ—Ä–∞—Ä—Ö–∏–∏
const buildHierarchy = (employees) => {
  const map = {};
  const roots = [];

  employees.forEach((employee) => {
    map[employee.idZamestnance] = { ...employee, children: [] };
  });

  employees.forEach((employee) => {
    if (employee.zamestnanecIdZamestnance) {
      const parent = map[employee.zamestnanecIdZamestnance];
      if (parent) {
        parent.children.push(map[employee.idZamestnance]);
      }
    } else {
      roots.push(map[employee.idZamestnance]);
    }
  });

  return roots;
};

// –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
const EmployeeListItem = ({ employee, positionsMap, averageSalaries, level = 0 }) => {
  const [open, setOpen] = useState(false);

  const positionName = positionsMap[employee.poziceIdPozice] || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è";
  const positionIcon = positionIcons[employee.poziceIdPozice] || <PersonIcon color="primary" />;
  const averageSalary = averageSalaries[employee.idZamestnance]; // –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –∏–∑ –ø—Ä–æ–ø—Å–æ–≤

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è/—Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
  const handleToggle = () => {
    setOpen(!open);
  };

  return (
    <>
      <ListItem sx={{ pl: level * 4 }}>
        <ListItemAvatar>
          <Avatar>{employee.employeeName?.charAt(0) || "?"}</Avatar>
        </ListItemAvatar>
        <ListItemText
          primary={
            <Box display="flex" alignItems="center">
              {positionIcon}
              <Typography variant="subtitle1" sx={{ ml: 1, fontWeight: "bold" }}>
                {employee.employeeName || "N/A"}
              </Typography>
            </Box>
          }
          secondary={
            <>
              <Typography variant="body2" color="textSecondary">
                {positionName}
              </Typography>
              {employee.email && (
                <Typography variant="body2" color="textSecondary">
                  üìß {employee.email}
                </Typography>
              )}
              {employee.phone && (
                <Typography variant="body2" color="textSecondary">
                  üìû {employee.phone}
                </Typography>
              )}
              <Typography variant="body2" color="textSecondary">
                {averageSalary !== null
                  ? `–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö: ${averageSalary.toFixed(2)}`
                  : "–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}
              </Typography>
            </>
          }
        />
        {employee.children?.length > 0 && (
          <IconButton edge="end" onClick={handleToggle}>
            {open ? <ExpandLess /> : <ExpandMore />}
          </IconButton>
        )}
      </ListItem>
      <Collapse in={open} timeout="auto" unmountOnExit>
        <List component="div" disablePadding>
          {employee.children.map((child) => (
            <EmployeeListItem
              key={child.idZamestnance}
              employee={child}
              positionsMap={positionsMap}
              averageSalaries={averageSalaries} // –ü–µ—Ä–µ–¥–∞–µ–º –∑–∞—Ä–ø–ª–∞—Ç—ã –¥–∞–ª—å—à–µ
              level={level + 1}
            />
          ))}
        </List>
      </Collapse>
    </>
  );
};


// –ö–æ—Ä–Ω–µ–≤–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
const EmployeeInfo = () => {
  const [hierarchy, setHierarchy] = useState([]);
  const [positions, setPositions] = useState({});
  const [averageSalaries, setAverageSalaries] = useState({}); // –°—Ä–µ–¥–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö
  const [loading, setLoading] = useState(true);
  const [snackbar, setSnackbar] = useState({
    open: false,
    message: "",
    severity: "success",
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–∑–∏—Ü–∏–π
  const fetchPositions = async () => {
    try {
      const response = await api.get("/api/zamestnanci/pozice");
      const map = response.reduce((acc, pos) => {
        acc[pos.ID_POZICE] = pos.NAZEV;
        return acc;
      }, {});
      setPositions(map);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∑–∏—Ü–∏–π:", error);
      setSnackbar({
        open: true,
        message: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∑–∏—Ü–∏–π",
        severity: "error",
      });
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ä–µ–¥–Ω–µ–π –∑–∞—Ä–ø–ª–∞—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
  const fetchAverageSalaries = async (employees) => {
    const salaries = {};
    const promises = employees.map(async (employee) => {
      try {
        const response = await api.get(`/api/zamestnanci/${employee.idZamestnance}/average-salary`);
        salaries[employee.idZamestnance] = response || null; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ä–µ–¥–Ω–µ–π –∑–∞—Ä–ø–ª–∞—Ç—ã –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ${employee.idZamestnance}:`, error);
        salaries[employee.idZamestnance] = null; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      }
    });
    await Promise.all(promises);
    setAverageSalaries(salaries);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  const fetchData = async () => {
    try {
      await fetchPositions();
      const response = await api.get("/api/zamestnanci/hierarchy/1");
      console.log(response)
      const tree = buildHierarchy(response);
      setHierarchy(tree);
      await fetchAverageSalaries(response); // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞—Ä–ø–ª–∞—Ç—ã –ø–æ—Å–ª–µ –∏–µ—Ä–∞—Ä—Ö–∏–∏
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
      setSnackbar({
        open: true,
        message: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö",
        severity: "error",
      });
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  return (
    <Box
      sx={{
        maxWidth: 800,
        margin: "0 auto",
        padding: 3,
      }}
      role="main"
      aria-label="–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–µ—Ä–∞—Ä—Ö–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"
    >
      <Typography variant="h4" component="h1" gutterBottom align="center">
        –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
      </Typography>
      {loading ? (
        <Box display="flex" justifyContent="center" alignItems="center" padding={2}>
          <CircularProgress />
        </Box>
      ) : (
        <List>
          {hierarchy.map((employee) => (
            <EmployeeListItem
              key={employee.idZamestnance}
              employee={employee}
              positionsMap={positions}
              averageSalaries={averageSalaries} // –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã
            />
          ))}
        </List>
      )}
      <Snackbar
        open={snackbar.open}
        autoHideDuration={6000}
        onClose={() => setSnackbar({ ...snackbar, open: false })}
      >
        <Alert
          onClose={() => setSnackbar({ ...snackbar, open: false })}
          severity={snackbar.severity}
          sx={{ width: "100%" }}
        >
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Box>
  );
};

export default EmployeeInfo;
