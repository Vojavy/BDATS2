// EmployeeInfo.js
import React, { useState, useEffect } from "react";
import {
  Box,
  Typography,
  CircularProgress,
  Snackbar,
  Alert,
  Avatar,
  List,
  ListItem,
  ListItemAvatar,
  ListItemText,
  IconButton,
  Collapse,
} from "@mui/material";
import {
  ExpandLess,
  ExpandMore,
  Person as PersonIcon,
} from "@mui/icons-material";
import { FaUserTie, FaUsers, FaEnvelope, FaPhone } from "react-icons/fa"; // –ò–∫–æ–Ω–∫–∏ –¥–ª—è –ø–æ–∑–∏—Ü–∏–π
import api from "../services/api"; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É –≤–∞—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω axios –∏–ª–∏ –¥—Ä—É–≥–æ–π –∫–ª–∏–µ–Ω—Ç API

// –ö–∞—Ä—Ç–∞ –∏–∫–æ–Ω–æ–∫ –¥–ª—è –ø–æ–∑–∏—Ü–∏–π
const positionIcons = {
  1: <FaUserTie color="primary" />, // –ú–µ–Ω–µ–¥–∂–µ—Ä
  2: <FaUsers color="secondary" />, // –ö–æ–º–∞–Ω–¥–∏—Ä
  3: <FaEnvelope color="success" />, // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
  4: <FaPhone color="warning" />, // –°–æ—Ç—Ä—É–¥–Ω–∏–∫
  // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
};

// –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
const EmployeeListItem = ({ employee, positionsMap, level = 0 }) => {
  const [open, setOpen] = useState(false);
  const [children, setChildren] = useState([]);
  const [loading, setLoading] = useState(false);
  const [snackbar, setSnackbar] = useState({
    open: false,
    message: "",
    severity: "success",
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è/—Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥—á–∏–Ω—ë–Ω–Ω—ã—Ö
  const handleClick = () => {
    // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞ —É—Ä–æ–≤–Ω–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (level === 0)
    if (level === 0) {
      if (open) {
        setOpen(false);
      } else {
        if (children.length === 0) {
          fetchChildren();
        } else {
          setOpen(true);
        }
      }
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥—á–∏–Ω—ë–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
  const fetchChildren = async () => {
    setLoading(true);
    try {
      const response = await api.get(`/api/zamestnanci/hierarchy/${employee.idZamestnance}`);
      if (response && Array.isArray(response)) {
        setChildren(response);
        if (response.length > 0) {
          setOpen(true);
        } else {
          // –ï—Å–ª–∏ –ø–æ–¥—á–∏–Ω—ë–Ω–Ω—ã—Ö –Ω–µ—Ç, –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–≤–µ—Ä–Ω—É—Ç—ã–º
          setSnackbar({
            open: true,
            message: "–£ —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ—Ç –ø–æ–¥—á–∏–Ω—ë–Ω–Ω—ã—Ö.",
            severity: "info",
          });
        }
      } else {
        console.error("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç API:", response);
        setChildren([]);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–µ—Ä–∞—Ä—Ö–∏–∏:", error);
      setSnackbar({
        open: true,
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–µ—Ä–∞—Ä—Ö–∏–∏",
        severity: "error",
      });
      setChildren([]);
    } finally {
      setLoading(false);
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –∫–∞—Ä—Ç—ã –ø–æ–∑–∏—Ü–∏–π
  const positionName = positionsMap[employee.poziceIdPozice] || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è";
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –ø–æ–∑–∏—Ü–∏–∏
  const positionIcon = positionIcons[employee.poziceIdPozice] || <PersonIcon color="primary" />;

  return (
    <>
      <ListItem
        sx={{ pl: level * 4 }}
        secondaryAction={
          // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–∫–æ–Ω–∫—É —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (level === 0)
          level === 0 && (
            <IconButton edge="end" onClick={handleClick}>
              {open ? <ExpandLess /> : <ExpandMore />}
            </IconButton>
          )
        }
      >
        <ListItemAvatar>
          <Avatar>
            {employee.employeeName ? employee.employeeName.charAt(0) : "?"}
          </Avatar>
        </ListItemAvatar>
        <ListItemText
          primary={
            <Box display="flex" alignItems="center">
              {positionIcon}
              <Typography variant="subtitle1" sx={{ ml: 1, fontWeight: 'bold' }}>
                {employee.employeeName || "N/A"}
              </Typography>
            </Box>
          }
          secondary={
            <>
              <Typography variant="body2" color="textSecondary">
                {positionName}
              </Typography>
              {employee.email && (
                <Typography variant="body2" color="textSecondary">
                  üìß {employee.email}
                </Typography>
              )}
              {employee.phone && (
                <Typography variant="body2" color="textSecondary">
                  üìû {employee.phone}
                </Typography>
              )}
            </>
          }
          onClick={handleClick}
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π
          style={{ cursor: level === 0 ? "pointer" : "default" }}
        />
      </ListItem>
      {/* –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥—á–∏–Ω—ë–Ω–Ω—ã—Ö */}
      <Collapse in={open} timeout="auto" unmountOnExit>
        {loading ? (
          <Box display="flex" justifyContent="center" alignItems="center" padding={2}>
            <CircularProgress size={20} />
          </Box>
        ) : (
          children.length > 0 && (
            <List component="div" disablePadding>
              {children.map((child) => {
                // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –ø–æ–¥—á–∏–Ω—ë–Ω–Ω–æ–≥–æ –µ—Å—Ç—å idZamestnance
                if (!child.idZamestnance) {
                  console.warn("Child employee missing idZamestnance:", child);
                  return null;
                }
                return (
                  <EmployeeListItem
                    key={child.idZamestnance}
                    employee={child}
                    positionsMap={positionsMap}
                    level={level + 1}
                  />
                );
              })}
            </List>
          )
        )}
      </Collapse>
      {/* Snackbar –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
      <Snackbar
        open={snackbar.open}
        autoHideDuration={6000}
        onClose={() => setSnackbar({ ...snackbar, open: false })}
      >
        <Alert
          onClose={() => setSnackbar({ ...snackbar, open: false })}
          severity={snackbar.severity}
          sx={{ width: "100%" }}
        >
          {snackbar.message}
        </Alert>
      </Snackbar>
    </>
  );
};

// –ö–æ—Ä–Ω–µ–≤–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
const EmployeeInfo = () => {
  const [managers, setManagers] = useState([]);
  const [positions, setPositions] = useState({});
  const [loading, setLoading] = useState(true);
  const [positionsLoading, setPositionsLoading] = useState(true);
  const [snackbar, setSnackbar] = useState({
    open: false,
    message: "",
    severity: "success",
  });

  // –°–ø–∏—Å–æ–∫ ID –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤. –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ –∏—Ö –∏–∑ API
  const managerIds = [1, 2]; // –ü—Ä–∏–º–µ—Ä–Ω—ã–µ ID

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–∑–∏—Ü–∏–π
  const fetchPositions = async () => {
    setPositionsLoading(true);
    try {
      const response = await api.get("/api/zamestnanci/pozice");
      console.log('Positions API Response:', response);
      if (response && Array.isArray(response)) {
        const map = {};
        response.forEach((pos) => {
          map[pos.ID_POZICE] = pos.NAZEV;
        });
        setPositions(map);
      } else {
        console.error("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π:", response);
        setPositions({});
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–∑–∏—Ü–∏–π:", error);
      setSnackbar({
        open: true,
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–∑–∏—Ü–∏–π",
        severity: "error",
      });
      setPositions({});
    } finally {
      setPositionsLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
  const fetchManagers = async () => {
    setLoading(true);
    try {
      const fetchPromises = managerIds.map((id) =>
        api.get(`/api/zamestnanci/hierarchy/${id}`)
      );
      const results = await Promise.all(fetchPromises);
      console.log('Managers API Responses:', results);
      // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–∞–∂–¥–æ–º –æ—Ç–≤–µ—Ç–µ ‚Äî —ç—Ç–æ —Å–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä
      const managersData = results
        .map((result) => {
          if (result && Array.isArray(result) && result.length > 0) {
            return result[0];
          }
          return null;
        })
        .filter((manager) => manager !== null && manager.idZamestnance);
      setManagers(managersData);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:", error);
      setSnackbar({
        open: true,
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤",
        severity: "error",
      });
    } finally {
      setLoading(false);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    fetchPositions();
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∑–∏—Ü–∏–π
  useEffect(() => {
    if (!positionsLoading) {
      fetchManagers();
    }
  }, [positionsLoading]);

  return (
    <Box
      sx={{
        maxWidth: 800,
        margin: "0 auto",
        padding: 3,
      }}
      role="main"
      aria-label="–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–µ—Ä–∞—Ä—Ö–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"
    >
      <Typography variant="h4" component="h1" gutterBottom align="center">
        –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
      </Typography>
      {(loading || positionsLoading) ? (
        <Box display="flex" justifyContent="center" alignItems="center" padding={2}>
          <CircularProgress />
        </Box>
      ) : (
        <List>
          {managers.map((manager) => {
            // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –µ—Å—Ç—å idZamestnance
            if (!manager.idZamestnance) {
              console.warn("Manager missing idZamestnance:", manager);
              return null;
            }
            return (
              <EmployeeListItem
                key={manager.idZamestnance}
                employee={manager}
                positionsMap={positions}
                level={0} // –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ 0
              />
            );
          })}
        </List>
      )}
      {/* Snackbar –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
      <Snackbar
        open={snackbar.open}
        autoHideDuration={6000}
        onClose={() => setSnackbar({ ...snackbar, open: false })}
      >
        <Alert
          onClose={() => setSnackbar({ ...snackbar, open: false })}
          severity={snackbar.severity}
          sx={{ width: "100%" }}
        >
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Box>
  );
};

export default EmployeeInfo;
